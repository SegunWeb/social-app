{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.js","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.js"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","editStatus","newStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","value","onChange","e","currentTarget","ProfileDataFormRedux","reduxForm","form","handleSubmit","profile","error","onSubmit","onClick","style","color","createField","Input","Textarea","type","Object","keys","contacts","map","key","ProfileData","isOwner","ProfileEditMode","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","contactTitle","contactValue","Contact","ProfileInfo","savePhoto","saveProfile","className","s","descriptionBlock","src","photos","large","userPhoto","alt","imgSize","target","files","length","initialValues","formData","then","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostReduxForm","Field","placeholder","component","validate","requiredField","name","MyPosts","postsElements","posts","p","id","postsBlock","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","this","match","params","loginUserId","history","push","getProfileUsersThunk","getStatusUsersThunk","refreshProfile","prevProps","prevState","snapshot","setState","updateStatusUsersThunk","Component","compose","authUser","isAuth","withRouter"],"mappings":"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","file":"static/js/3.2149cab1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"imgSize\":\"ProfileInfo_imgSize__aWJCg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2ifKf\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React, {useEffect, useState} from 'react'\n\n\nconst ProfileStatusWithHooks = (props) =>  {\n\n    const [editMode, setEditMode] = useState(false);\n    const [editStatus, newStatus] = useState(props.status);\n\n    useEffect(() => {\n        newStatus(props.status)\n    }, [props.status]);\n\n\n    const activateMode = () => {\n          setEditMode(true)\n    };\n    const outMode = () => {\n        setEditMode(false);\n        props.updateStatus(editStatus);\n    };\n    const onStatusChange = (e) => {\n        newStatus(e.currentTarget.value);\n    };\n\n    return (\n        <div>\n            {!editMode &&\n                <div><span onDoubleClick={activateMode} >{props.status || \"no status\"}</span></div>\n            }\n            {editMode &&\n            <div>\n                <input autoFocus\n                       onBlur={outMode}\n                       value={editStatus}\n                       onChange={onStatusChange}\n                />\n            </div>\n            }\n        </div>\n    );\n};\n\nexport default ProfileStatusWithHooks;","import React from 'react';\nimport {createField, Input, Textarea} from \"../../commons/FormsControls/FormControls\";\nimport Login from \"../../Login/Login\";\nimport {reduxForm} from \"redux-form\";\n\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\n    return (\n        <form onSubmit={handleSubmit}>\n            <div>\n                <button onClick={() => {}}>save</button>\n                {\n                    error && <p style={{color: \"red\"}}>{error}</p>\n                }\n            </div>\n            <div>\n                <p>\n                    <b>Full name</b> -- {createField (\"Full name\", \"fullName\", [], Input)}\n                </p>\n                <p>\n                    <b>About me</b> --\n                    {/*{profile.aboutMe}*/}\n                    {createField (\"About me\", \"aboutMe\", [], Textarea)}\n                </p>\n                <div>\n                    <p>\n                        {/*Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}*/}\n                     <b>Looking for a Job</b> --   {createField (\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\n                    </p>\n                    <p>\n                        {/*{profile.lookingForAJobDescription}*/}\n                      <b>My professionals skills</b> --  {createField (\"My professionals skills\", \"lookingForAJobDescription\", [], Textarea)}\n                    </p>\n                </div>\n                {/*<div>*/}\n                {/*    <b>Contact</b>: {Object.keys(profile.contacts).map(key => {*/}\n                {/*    return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>*/}\n                {/*})}*/}\n                {/*</div>*/}\n                <div>\n                     {Object.keys(profile.contacts).map(key => {\n                    return (\n                        <div key={key}>\n                            <b>{key}</b>: <span> {createField (key, \"contacts.\" + key, [], Input)}</span>\n                        </div>\n                      )\n                })}\n                </div>\n            </div>\n        </form>\n    );\n};\n\nconst ProfileDataFormRedux = reduxForm({form: 'edit-profile'})(ProfileDataForm);\n\nexport default ProfileDataFormRedux;","import React, {useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../commons/Preloader/preloader\";\nimport userPhoto from \"../../../assets/myface.jpg\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\n\n    const [editMode, setEditMode] = useState(false);\n\n\n\n    if(!profile) {\n        return <Preloader/>\n    }\n    const mainPhotoSelected = (e) => {\n        if(e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    };\n\n    const ProfileEditMode = () => {\n        setEditMode(true)\n    };\n\n    const onSubmit = (formData) => {\n         saveProfile(formData).then(() => {\n            setEditMode(false);\n        })\n    };\n\n\n\n    return (\n        <div>\n            {/*<div>*/}\n            {/*    <img*/}\n            {/*        src='https://images.pexels.com/photos/248797/pexels-photo-248797.jpeg?auto=compress&cs=tinysrgb&h=350'/>*/}\n            {/*</div>*/}\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto} alt=\"photo\" className={s.imgSize}/>\n                {isOwner && <input type=\"file\" onChange={mainPhotoSelected}/>}\n\n                {editMode ?\n                    <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/> :\n                    <ProfileData\n                        profile={profile}\n                        isOwner={isOwner}\n                        ProfileEditMode={ProfileEditMode}\n                    />\n                }\n                <ProfileStatusWithHooks\n                    status={status}\n                       updateStatus={updateStatus}\n                />\n            </div>\n        </div>\n    )\n}\n\nconst ProfileData = ({profile, isOwner, ProfileEditMode}) => {\n   return (\n       <div> {isOwner && <div><button onClick={ProfileEditMode}>edit</button></div>}\n           <div>\n               <h1>{profile.fullName}</h1>\n               <h3>{profile.aboutMe}</h3>\n               <div>\n                   <p>Looking for a job: {profile.lookingForAJob ? \"yes\" : \"no\"}</p>\n                   <p>{profile.lookingForAJob &&\n                   <span>{profile.lookingForAJobDescription}</span>\n                   }</p>\n               </div>\n               <div>\n                   <b>Contact</b>: {Object.keys(profile.contacts).map(key => {\n                   return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n               })}\n               </div>\n           </div>\n       </div>\n   )\n};\n\nconst Contact = ({contactTitle, contactValue}) => {\n    return (\n        <div>\n            {contactTitle} -- <span>{contactValue}</span>\n        </div>\n    )\n};\n\nexport default ProfileInfo;","import React from 'react';\nimport s from './Post.module.css';\n\nconst Post = (props) => {\n  return (\n    <div className={s.item}>\n      <img src='https://movies4maniacs.liberty.me/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' />\n        { props.message }\n          <div>\n        <span>like</span> { props.likesCount }\n      </div>\n    </div>\n  )\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\nimport {Textarea} from \"../../commons/FormsControls/FormControls\";\n\n\nconst MyPosts = (props) => {\n    let postsElements =\n        props.posts.map( p => <Post key={p.id} message={p.message} likesCount={p.likesCount}/>);\n\n    // let newPostElement = React.createRef();\n\n    let addNewPostText = (value) => {\n        props.addPost(value.newPostText)\n    };\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <AddNewPostReduxForm\n                onSubmit={addNewPostText}\n            />\n            <div className={s.posts}>\n                { postsElements }\n            </div>\n        </div>\n    )\n};\n\nlet maxLength10 = maxLengthCreator(10);\n\nconst addNewPostForm = (props) => (\n    <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field\n                placeholder={\"enter text\"}\n                component={Textarea}\n                validate={[requiredField, maxLength10]}\n                name={\"newPostText\"} />\n        </div>\n        <div>\n            <button>Add post</button>\n        </div>\n    </form>\n);\nconst AddNewPostReduxForm = reduxForm({form: 'ProfileAddNewPostForm'})(addNewPostForm);\n\n\n\n\nexport default MyPosts;","import React from 'react';\nimport {addPostActionCreator} from \"../../../reducer/ProfileReducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\nconst mapStateToProps = (state) => {\n  return {\n      posts: state.profilePage.posts,\n      newPostText: state.profilePage.newPostText\n  }\n};\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\n        addPost: (newPostText) => {\n            dispatch(addPostActionCreator(newPostText));\n        }\n    }\n};\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;","import React from 'react';\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\n\nconst Profile = (props) => {\n    return (\n        <div>\n            <ProfileInfo\n                profile={props.profile}\n                status={props.status}\n                updateStatus={props.updateStatus}\n                isOwner={props.isOwner}\n                savePhoto={props.savePhoto}\n                saveProfile={props.saveProfile}\n            />\n            <MyPostsContainer  />\n        </div>\n    )\n};\n\nexport default Profile;\n\n\n","import React, {Component} from 'react';\nimport {connect} from 'react-redux'\nimport Profile from \"./Profile\";\nimport {\n    getProfileUsersThunk,\n    getStatusUsersThunk,\n    savePhoto, saveProfile,\n    updateStatusUsersThunk\n} from \"../../reducer/ProfileReducer\";\nimport { withRouter} from \"react-router-dom\";\nimport {compose} from \"redux\";\n\n\nclass ProfileContainer extends Component {\n\n    refreshProfile() {\n        let userId = this.props.match.params.userId;\n        if(!userId) {\n            userId = this.props.loginUserId;\n            if(!userId) {\n                this.props.history.push('/login')\n            }\n        }\n        this.props.getProfileUsersThunk(userId);\n        this.props.getStatusUsersThunk(userId);\n    }\n\n    componentDidMount() {\n        this.refreshProfile()\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        let userId = this.props.match.params.userId;\n        if(prevProps.status !== this.props.status) {\n            this.setState({\n                status: this.props.status\n            })\n        }\n        if(userId !== prevProps.userId) {\n            this.refreshProfile()\n        }\n    }\n\n    render() {\n        let userId = this.props.match.params.userId;\n        return (\n            <div>\n                <Profile {...this.props}\n                        isOwner={!userId}\n                         profile={this.props.profile}\n                         status={this.props.status}\n                        updateStatus={this.props.updateStatusUsersThunk}\n                         savePhoto={this.props.savePhoto}\n                />\n            </div>\n        );\n    }\n}\nconst mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    loginUserId: state.authUser.id,\n    isAuth: state.authUser.isAuth,\n});\n\nexport default compose(\n    connect(mapStateToProps, { getProfileUsersThunk, getStatusUsersThunk, updateStatusUsersThunk, savePhoto, saveProfile}),\n    withRouter,\n    // withAuthRedirect,\n)\n(ProfileContainer);"],"sourceRoot":""}